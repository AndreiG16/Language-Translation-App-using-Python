# -*- coding: utf-8 -*-
"""Language_Translation_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/109rXdkkOWPMh_srodRLRWUS6ydXpk2cK

Python for Data Science Project / Language Translator App / Andrei-Cristian Galca

1. Install Dependencies

The required libraries for the project are installed:

*   torch, torchvision, and torchaudio: Core libraries from PyTorch used to   support machine learning and deep learning tasks.

*   transformers: A library by HuggingFace that provides pre-trained NLP models.

*   gradio: Useful to build user-friendly web interfaces for machine learning models

*   sentenpiece: Tokenizer required by some NLP models.



*   sacremoses: For text pre-processing, including tokenization.
"""

!pip install torch torchvision torchaudio

!pip install transformers ipywidgets gradio --upgrade

!pip install sentencepiece

pip install sacremoses

"""2. Load Translation Models


*   Hugging Face pipelines simplifies the access to pre-trained NLP models.
"""

import gradio as gr
from transformers import pipeline

"""3. Define Functions

* The Helsinki-NLP/opus-mt models are used for translating from English to German, French, and Romanian.

* Uses the translation_pipelines dictionary to fetch the appropriate pre-trained model.

*   The last function selects the correct translation function based on the target_language parameter.




"""

translation_pipelines = {
    "German": pipeline(task="translation", model="Helsinki-NLP/opus-mt-en-de"),
    "French": pipeline(task="translation", model="Helsinki-NLP/opus-mt-en-fr"),
    "Romanian": pipeline(task="translation", model="Helsinki-NLP/opus-mt-en-ro"),
}

def translate_to_german(text):
    try:
        translation_result = translation_pipelines["German"](text)
        return translation_result[0]['translation_text']
    except Exception as e:
        return f"Error during translation: {str(e)}"

def translate_to_french(text):
    try:
        translation_result = translation_pipelines["French"](text)
        return translation_result[0]['translation_text']
    except Exception as e:
        return f"Error during translation: {str(e)}"

def translate_to_romanian(text):
    try:
        translation_result = translation_pipelines["Romanian"](text)
        return translation_result[0]['translation_text']
    except Exception as e:
        return f"Error during translation: {str(e)}"

def translate_transformers(text, target_language):
    if target_language == "German":
        return translate_to_german(text)
    elif target_language == "French":
        return translate_to_french(text)
    elif target_language == "Romanian":
        return translate_to_romanian(text)
    else:
        return "Invalid target language"

"""4. Create Gradio Function and Interface



*  Languages Dropdown: A list of target languages presented to the user in the interface.

*  Fn: The function that processes the input.

*   Inputs: User inputs.

*   Outputs: A text box to display the translated text.

*   Title and Description: Provides details about the app.



"""

languages = [("German", "German"), ("French", "French"), ("Romanian", "Romanian")]

interface = gr.Interface(
    fn=translate_transformers,
    inputs=[gr.Textbox(lines=2, placeholder='Text to translate'), gr.Dropdown(languages, label="Target Language")],
    outputs=gr.Textbox(),  # Use Gradio Textbox for output
    live=True,
    title='Language Translation App',
    description='Translate text from English to the selected language.'
)

interface.launch()

"""5. Summary

This project achieves the following:


*   Utilizes pre-trained language models for translation.

*   Employs gradio to create an intuitive user interface.

*   Supports multiple languages for translation.




"""